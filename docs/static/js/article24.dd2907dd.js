(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["article24"],{"97a0":function(s,a,r){"use strict";r.r(a);var t=function(){var s=this,a=s.$createElement;s._self._c;return s._m(0)},e=[function(){var s=this,a=s.$createElement,r=s._self._c||a;return r("section",[r("p",[s._v("通过打砖块这个Demo的练习，差不多算是把Canvas的基本用法又重新过了一遍，但是算法方面并没有多少干货，那么这次就来个稍微有点挑战性的Demo——围住神经猫。")]),r("blockquote",[r("p",[s._v("演示地址："),r("em",[r("a",{attrs:{href:"https://blog.csdoker.com/SurroundCat/"}},[s._v("SurroundCat")])]),r("br"),s._v(" Github："),r("em",[r("a",{attrs:{href:"https://github.com/csd758371536/SurroundCat"}},[s._v("SurroundCat")])]),r("br"),r("em",[s._v("不要吝啬你的Star哦~(〃'▽'〃)")])])]),r("h2",[s._v("对象构建")]),r("p",[s._v("要编写面向对象的程序，第一步当然是先分析清楚程序有哪些基本对象了，就像打砖块那个项目一样，让我们从这个程序的界面开始，分析下组成这个程序的有哪些基本的对象。")]),r("h3",[s._v("Grid")]),r("h4",[s._v("定义")]),r("p",[s._v("游戏的界面是由一个一个圆圈组成的，所以游戏的基本要素之一就是这些“圆圈”了，不过我更喜欢叫它“格子”"),r("code",{pre:!0},[s._v("Grid")]),s._v("这个名字。虽然更抽象了，但是从程序的角度来看，反而更利于我们去抽取它应该具有的属性和方法了。")]),r("p",[s._v("一个格子要呈现在画面上，无论如何我们也要知道它的位置吧，所以它此时在整个画面上所处的行数"),r("code",{pre:!0},[s._v("gridRow")]),s._v("和列数"),r("code",{pre:!0},[s._v("gridCol")]),s._v("就是必不可少的了。（将画布上的坐标映射成行列数能大大简化后面的运算操作）")]),r("p",[s._v("然后在游戏的进行过程中，格子会有猫和障碍这两种状态，如果再加上它自己默认的状态的话，就会有三种基本状态了。因此，必须为格子增加类型"),r("code",{pre:!0},[s._v("type")]),s._v("这个属性。（还剩一个属性，在后面介绍搜索算法时再给出定义）")]),r("p",[s._v("这样，程序中最重要的"),r("code",{pre:!0},[s._v("Grid")]),s._v("对象就定义好了：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 定义格子 */")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" Grid = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("gridRow, gridCol, type, isWalkable")]),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRow = gridRow; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 格子所处行数")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridCol = gridCol; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 格子所处列数")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridType = type; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 格子类型 0默认 1障碍 2猫")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".isWalkable = isWalkable; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 格子是否可行   true可行 false不可行")]),s._v("\n};\n")])]),r("h4",[s._v("方法")]),r("p",[s._v("Grid应该有哪些方法呢？"),r("br"),s._v(" 我们想在界面上看到一个Grid，总要先把它“画”出来吧，这样才能在界面上成功看到它。所以第一个方法就是用于画格子的"),r("code",{pre:!0},[s._v("drawGrid()")]),s._v("方法：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("drawGrid: "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("game, context")]),s._v(") ")]),s._v("{\n    context.beginPath();\n    context.arc("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getGridPosition(game).gridPositionX, \n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getGridPosition(game).gridPositionY, "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRadius, "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".PI * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(");\n    context.fillStyle = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridColor["),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridType];\n    context.fill();\n    context.closePath();\n}\n")])]),r("p",[s._v("要画出圆形，调用的是"),r("code",{pre:!0},[s._v("arc")]),s._v("这个canvas方法，我们需要控制的参数其实只有坐标和半径。"),r("br"),s._v(" 半径很简单，直接在原型上定义"),r("code",{pre:!0},[s._v("gridRadius")]),s._v("就行了，而坐标则需要我们单独用一个方法去计算，这便是"),r("code",{pre:!0},[s._v("getGridPosition()")]),s._v("方法：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("getGridPosition: "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("game")]),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gridPosition = {};\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果为偶数行 从左向右边开始画  否则从右向左")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRow % "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" == "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n        gridPosition.gridPositionX = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRadius * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(" / "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("\n        + "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridCol * ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRadius * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" + "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridGap);\n        gridPosition.gridPositionY = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRadius\n        + "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRow * ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRadius * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" + "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridGap);\n    } "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        gridPosition.gridPositionX = game.gameCanvasWidth - ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRadius * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(" / "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(" \n        + (game.gameGridColCount - "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" - "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridCol) * ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRadius * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" + "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridGap));\n        gridPosition.gridPositionY = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRadius + "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRow * ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridRadius * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" + "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gridGap);\n    }\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" gridPosition;\n}\n")])]),r("p",[s._v("由于在画面上要看到一种交错的效果，所以还必须给格子在它的原型上定义间隙"),r("code",{pre:!0},[s._v("gridGap")]),s._v("这个属性，以及还需要定义一个数组"),r("code",{pre:!0},[s._v("gridColor")]),s._v("来表示格子的颜色。"),r("br"),s._v(" 有了格子的间隙，格子的半径及格子的行列数，那么此时它在画布上的位置坐标就能表示了。计算的时候需要考虑交错的间隔值，所以稍微比较麻烦，而且这里还有改进的余地，读者不必参考。"),r("br"),s._v(" 最后，我们要取得画布区域的高度和宽度，因此还需要后面定义的"),r("code",{pre:!0},[s._v("Game")]),s._v("对象的实例，这里当做参数传递给这个函数就行了。")]),r("h3",[s._v("Barrier")]),r("h4",[s._v("定义")]),r("p",[s._v("界面上生成的障碍，显然也需要坐标值，我们也用映射好的行列数来表示它的位置。至于类型，因为我们的抽象思路已经把类型定义在"),r("code",{pre:!0},[s._v("Grid")]),s._v("对象上了，所以"),r("code",{pre:!0},[s._v("Barrier")]),s._v("就不需要单独定义了：（对象的抽象思路多种多样，可自行考虑最佳实现方案）")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 定义障碍 */")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" Barrier = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y")]),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".barrierX = x; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 障碍X坐标")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".barrierY = y; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 障碍Y坐标")]),s._v("\n};\n")])]),r("h4",[s._v("方法")]),r("p",[s._v("暂时没有抽象出方法，只留出接口，读者可自行实现。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("Barrier.prototype = {};\n")])]),r("h3",[s._v("Cat")]),r("p",[s._v("猫的性质和障碍是类似的，直接给出定义：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 定义神经猫 */")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" Cat = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y")]),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".catX = x; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 猫X坐标")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".catY = y; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 猫Y坐标")]),s._v("\n};\nCat.prototype = {};\n")])]),r("h3",[s._v("Game")]),r("h4",[s._v("定义")]),r("p",[s._v("和打砖块那个例子一样，这个游戏同样需要一个"),r("code",{pre:!0},[s._v("Game")]),s._v("对象来管理程序中出现的基本属性和方法。"),r("br"),s._v(" 游戏是否开始、本局所用步数和历史最短步数，这三个就是需要定义的基本属性了：（也许叫它们游戏的状态更合适）")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 定义游戏状态 */")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" Game = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("gameStart, gameSteps, gameMinSteps")]),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameStart = gameStart; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 游戏是否开始")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameSteps = gameSteps;\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameMinSteps = gameMinSteps;\n};\n")])]),r("p",[s._v("剩下的还有一些基本的属性，我们定义在原型上：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("Game.prototype = {\n    "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("gameGridRowCount")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("9")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 游戏格子行数")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("gameGridColCount")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("9")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 游戏格子列数")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("gameBarrierCount")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 游戏障碍个数")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("gameCanvasWidth")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 游戏画布宽度")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("gameCanvasHeight")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 游戏画布高度")]),s._v("\n};\n")])]),r("h4",[s._v("方法")]),r("p",[s._v("如你所料，"),r("code",{pre:!0},[s._v("Game")]),s._v("一定需要定义一些重要的方法，具体有哪些呢，从定义入手就能窥得端倪了。")]),r("p",[s._v("既然在构造函数中定义了步数和最小步数，那当然需要方法来设置这个步数了，所以我们需要两个设置步数的方法：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 设置游戏当前所用步数")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("setGameSteps")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("gameSteps")]),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"steps"')]),s._v(").innerHTML = gameSteps;\n},\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 设置游戏最短所用步数")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("setGameMinSteps")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("gameMinSteps")]),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"minSteps"')]),s._v(").innerHTML = gameMinSteps;\n},\n")])]),r("p",[s._v("要改变DOM元素的内容，这里用到的是元素的"),r("code",{pre:!0},[s._v("innerHTML")]),s._v("属性，将程序中当前所用的步数传入方法即可。")]),r("p",[s._v("在"),r("code",{pre:!0},[s._v("getGridPosition()")]),s._v("方法中需要取得游戏画布的尺寸，因此，我们需要一个方法来设置画布的尺寸：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 设置游戏画布尺寸")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("setGameCanvasSize")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取格子数据")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gridData = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getGameGridData();\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 定义画布宽度")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameCanvasWidth = gridData.gridRadius * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" * "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameGridRowCount + \n    gridData.gridGap * ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameGridRowCount - "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") + gridData.gridRadius * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" + gridData.gridGap / "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 定义画布高度                       ")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameCanvasHeight = gridData.gridRadius * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" * "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameGridColCount + \n    gridData.gridGap * ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameGridColCount - "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 设置canvas宽度")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"canvas"')]),s._v(").setAttribute("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"width"')]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameCanvasWidth);\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 设置canvas高度")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"canvas"')]),s._v(").setAttribute("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"height"')]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameCanvasHeight);\n},\n")])]),r("p",[s._v("因为要达到响应式的效果，所以画布的高度和宽度要根据当前屏幕下格子的半径和间隙大小来计算，我们用"),r("code",{pre:!0},[s._v("getGameGridData()")]),s._v("方法来根据屏幕宽度动态改变格子的属性：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取游戏格子半径及间隔")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("getGameGridData")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gridData = {};\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 根据当前屏幕宽度来动态适配格子半径及间隔")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" clientWidth = "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".body.clientWidth;\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (clientWidth > "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1023")]),s._v(" && clientWidth < "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1440")]),s._v(") {\n        gridData.gridRadius = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("24")]),s._v(";\n        gridData.gridGap = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(";\n    } "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (clientWidth > "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("768")]),s._v(" && clientWidth < "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1024")]),s._v(") {\n        gridData.gridRadius = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("20")]),s._v(";\n        gridData.gridGap = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(";\n    } "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (clientWidth > "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("480")]),s._v(" && clientWidth < "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("769")]),s._v(") {\n        gridData.gridRadius = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("16")]),s._v(";\n        gridData.gridGap = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(";\n    } "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (clientWidth < "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("481")]),s._v(") {\n        gridData.gridRadius = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("12")]),s._v(";\n        gridData.gridGap = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n    } "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        gridData.gridRadius = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("24")]),s._v(";\n        gridData.gridGap = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(";\n    }\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" gridData;\n},\n")])]),r("p",[s._v("屏幕窗口宽度的标准值可以自行设定，这里只适配常规屏幕宽度。")]),r("p",[s._v("游戏画布有了，接下来就需要初始化游戏格子了：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 初始化游戏格子")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("initGameGrids")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("girdData, gameBarriers, cat")]),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gridType, grid, isWalkable;\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gameGrids = [];\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" game = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(";\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameGridRowCount; i++) {\n        gameGrids[i] = [];\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" j = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; j < "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameGridColCount; j++) {\n            gridType = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n            isWalkable = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n            "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" k = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; k < gameBarriers.length; k++) {\n                "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (gameBarriers[k].barrierX == i && gameBarriers[k].barrierY == j) {\n                    gridType = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n                    isWalkable = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n                    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v(";\n                }\n            }\n            "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (cat.catX == i && cat.catY == j) {\n                gridType = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n                isWalkable = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n            }\n            grid = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Grid(i, j, gridType, isWalkable);\n            grid.gridRadius = girdData.gridRadius;\n            grid.gridGap = girdData.gridGap;\n            grid.drawGrid(game, context);\n            gameGrids[i][j] = grid;\n        }\n    }\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" gameGrids;\n},\n")])]),r("p",[s._v("这个方法其实个人觉得写得并不好，临时变量过多、方法调用比较混乱，不过勉强能用。"),r("br"),s._v(" 主体逻辑很简单，利用两个循环遍历游戏的每行每列，然后初始化grid对象，比较麻烦的是我们需要单独对传入构造函数的参数进行判断，比如当前格子的类型等属性。这里需要用到的一个变量是"),r("code",{pre:!0},[s._v("gameBarriers")]),s._v("，在后面全局的初始化方法"),r("code",{pre:!0},[s._v("initGame()")]),s._v("中会将它传入，同样，我们将返回一个初始化后的数组"),r("code",{pre:!0},[s._v("gameGrids")]),s._v("供后面的一些全局方法调用。")]),r("p",[s._v("游戏障碍的初始化，其实也是在"),r("code",{pre:!0},[s._v("initGame()")]),s._v("中调用它，并且把结果当做参数传入了"),r("code",{pre:!0},[s._v("initGameGrids()")]),s._v("方法：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 初始化障碍")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("initGameBarriers")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" x = [], y = [];\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gameBarriers = [];\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameGridRowCount; i++) {\n        x.push(i);\n    }\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" j = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; j < "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameGridColCount; j++) {\n        y.push(j);\n    }\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" k = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; k < "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameBarrierCount; k++) {\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" randomX = "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".floor("),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".random() * "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameGridRowCount);\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" randomY = "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".floor("),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".random() * "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameGridColCount);\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" ((x[randomX] == "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v(" && y[randomY] == "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v(") || (randomX == "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(" && randomY == "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(")) {\n            randomX = "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".floor("),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".random() * "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameGridRowCount);\n            randomY = "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".floor("),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".random() * "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".gameGridColCount);\n        }\n        gameBarriers.push("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Barrier(randomX, randomY));\n        x[randomX] = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v(";\n        y[randomY] = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v(";\n    }\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" gameBarriers;\n},\n")])]),r("p",[s._v("障碍的生成是利用"),r("code",{pre:!0},[s._v("Math.floor")]),s._v("来实现随机化的，需要注意的是，这里必须用一个数组来记录位置的状态，避免在同一个位置重复生成的bug出现。"),r("br"),s._v(" 当然，如果这个位置的状态已经是猫了，我们也让程序重新循环一次去获得新的位置。")]),r("p",[s._v("猫的位置初始化在中心位置就行了，取行数和列数的一半即是它的坐标值：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 初始化神经猫")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("initGameCat")]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" catPosX = (game.gameGridRowCount - "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") / "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" catPosY = (game.gameGridColCount - "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") / "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Cat(catPosX, catPosY));\n}\n")])]),r("p",[s._v("程序需要的基本对象构建好了，下一步就是用一些定义在全局的方法去调用它们了。")]),r("h2",[s._v("游戏初始化")]),r("p",[s._v("既然有了"),r("code",{pre:!0},[s._v("Game")]),s._v("对象，以及定义在它上面的初始化方法，那么我们就可以正式初始化游戏了：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" initGame = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 游戏对象初始化")]),s._v("\n    game = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Game("),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(");\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取缓存中的游戏记录数据")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gameData = "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("JSON")]),s._v(".parse("),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".localStorage.getItem("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"gameData"')]),s._v("));\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 判断缓存里是否有值")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (gameData != "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" && gameData != "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(") {\n        game.setGameMinSteps(gameData.gameMinSteps);\n    } "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        game.setGameMinSteps(game.gameMinSteps);\n    }\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 初始化当前游戏步数")]),s._v("\n    game.setGameSteps(game.gameSteps);\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 设置当前游戏画布大小")]),s._v("\n    game.setGameCanvasSize();\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 初始化神经猫")]),s._v("\n    cat = game.initGameCat();\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 初始化格子")]),s._v("\n    gameGrids = game.initGameGrids(game.getGameGridData(), game.initGameBarriers(), cat);\n};\n")])]),r("p",[s._v("在初始化之前，还需要一些定义在全局的变量配置，以供后面一些全局的函数使用：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 程序基本配置 */")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" canvas = "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"canvas"')]),s._v("); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获得canvas元素")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" context = canvas.getContext("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"2d"')]),s._v("); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获得context对象")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" game; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 创建游戏对象")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gameGrids = []; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 创建格子集合")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" cat; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 创建神经猫对象")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" isVisited; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 记录节点是否搜索的二维数组")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" searchDepth; "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 记录节点搜索深度")]),s._v("\n")])]),r("p",[s._v("在"),r("code",{pre:!0},[s._v("initGame()")]),s._v("中，首先需要定义全局的游戏对象"),r("code",{pre:!0},[s._v("game")]),s._v("，然后是游戏的各种初始化，最后是游戏缓存的获取。这里顺便讲讲游戏的缓存机制：")]),r("ol",[r("li",[s._v("每次初始化（刷新网页）会去读取浏览器的"),r("code",{pre:!0},[s._v("localStorage")]),s._v("，并判断是否有值")]),r("li",[s._v("如果有值就把缓存中的值设置给当前游戏的最小步数")]),r("li",[s._v("如果没有值就初始化当前游戏的最小步数")])]),r("p",[s._v("初始化后，应该能看到一个基本的界面了："),r("br"),r("img",{attrs:{src:"https://i.loli.net/2017/11/07/5a01199034f78.png",alt:"SurroundCat"}})]),r("h2",[s._v("事件绑定")]),r("p",[s._v("不论是一般的网页或是游戏程序都会有交互操作，而点击事件算是最常见的交互之一了，我们的程序里也需要绑定这么一个事件函数：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* canvas点击事件 */")]),s._v("\ncanvas.addEventListener("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"click"')]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("e")]),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < game.gameGridRowCount; i++) {\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" j = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; j < game.gameGridColCount; j++) {\n            "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (isInPath(e.offsetX, e.offsetY, gameGrids[i][j])) {\n                "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (gameGrids[i][j].gridType == "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n                    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 清除默认格子痕迹")]),s._v("\n                    clearGridView(i, j, "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(");\n                    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 让格子变为障碍")]),s._v("\n                    updateGameGrid(i, j, "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(");\n                    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 重置节点搜索的访问状态")]),s._v("\n                    resetGridVisited();\n                    resetGridDepth();\n                    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 重置当前节点的搜索深度")]),s._v("\n                    searchDepth = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n                    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 移动猫")]),s._v("\n                    moveCat();\n                    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 增加游戏所用步数")]),s._v("\n                    game.gameSteps++;\n                    game.setGameSteps(game.gameSteps);\n                }\n                "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(";\n            }\n        }\n    }\n}, "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(");\n")])]),r("p",[s._v("这个函数应该才算是程序所有逻辑的真正“入口”，让我们一步步来拆解它：")]),r("ol",[r("li",[s._v("事件直接绑定在canvas画布对象上，通过鼠标点击画布区域触发")]),r("li",[s._v("点击后，判断是否在画布的格子区域内")]),r("li",[s._v("如果点击在格子内，判断格子类型是否是默认类型")]),r("li",[s._v("如果点击的是默认类型，开始执行正式的游戏逻辑")])]),r("p",[s._v("点击事件的绑定，我们可以使用"),r("code",{pre:!0},[s._v("addEventListener")]),s._v("来完成。值得一提的是，这里的判断条件涉及到了第一个我们封装的函数"),r("code",{pre:!0},[s._v("isInPath()")]),s._v("：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 判断点是否在路径内 */")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" isInPath = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y, grid")]),s._v(")")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gridPosition = grid.getGridPosition(game);\n    context.beginPath();\n    context.arc(gridPosition.gridPositionX, gridPosition.gridPositionY, \n                grid.gridRadius, "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".PI * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(");\n    context.closePath();\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" context.isPointInPath(x, y);\n};\n")])]),r("p",[s._v("在这个函数中我们利用了canvas封装的一个API："),r("code",{pre:!0},[s._v("isPointInPath")]),s._v("，它能帮助我们判断一个点是否在一个绘制对象的路径中。（通俗点解释，其实就是一个点是否包含在一个2d图形之内）我们要做的是将这个点在画布上的x、y坐标传入这个函数，具体到程序中，即是点击的坐标，可以用event对象获取："),r("code",{pre:!0},[s._v("e.offsetX")]),s._v("、"),r("code",{pre:!0},[s._v("e.offsetY")]),s._v("，而在context对象之上必须还要调用一次"),r("code",{pre:!0},[s._v("arc")]),s._v("函数绘制出当前grid的路径，这样"),r("code",{pre:!0},[s._v("isPointInPath")]),s._v("函数才能返回判断的结果。")]),r("p",[s._v("前两步的判断都通过后，就应该执行正式的游戏逻辑了，它也分为如下几步：")]),r("ol",[r("li",[s._v("清除默认类型的格子痕迹")]),r("li",[s._v("让当前被点击的格子变成障碍的类型")]),r("li",[s._v("重置每个格子节点的访问状态以及搜索深度")]),r("li",[s._v("重置当前节点的搜索深度")]),r("li",[s._v("改变神经猫的位置")]),r("li",[s._v("增加游戏所用步数")])]),r("p",[s._v("因为涉及到搜索算法，所以这里的步骤只能大概解释下："),r("br"),s._v(" 在每次绘制之前利用"),r("code",{pre:!0},[s._v("clearRect")]),s._v("清除掉画布上当前区域的绘制痕迹，代码中已经把它封装到"),r("code",{pre:!0},[s._v("clearGridView()")]),s._v("中了：（搜索算法中，清除猫的痕迹也利用了这个函数）")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 清除格子显示痕迹 */")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" clearGridView = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("girdRow, gridCol, gridType, isWalkable")]),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获得猫所处的格子")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" grid = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Grid(girdRow, gridCol, gridType, isWalkable);\n    grid.gridRadius = game.getGameGridData().gridRadius;\n    grid.gridGap = game.getGameGridData().gridGap;\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 清除痕迹")]),s._v("\n    context.clearRect(grid.getGridPosition(game).gridPositionX - grid.gridRadius, \n    grid.getGridPosition(game).gridPositionY - grid.gridRadius,\n    grid.gridRadius * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", grid.gridRadius * "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(");\n};\n")])]),r("p",[s._v("清除痕迹后就可以让当前被点击的格子变为游戏障碍的类型了，我们利用的是"),r("code",{pre:!0},[s._v("updateGameGrid()")]),s._v("函数：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 更新格子状态 */")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" updateGameGrid = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y, type, isWalkable")]),s._v(") ")]),s._v("{\n    gameGrids[x][y].gridType = type;\n    gameGrids[x][y].drawGrid(game, context);\n    gameGrids[x][y].isWalkable = isWalkable;\n};\n")])]),r("p",[s._v("注意，这里必须为格子的"),r("code",{pre:!0},[s._v("isWalkable")]),s._v("属性赋值，以便让我们知道当前节点是否“可行走”，也就是让神经猫在搜索的时候判断格子是否可以移动。")]),r("p",[s._v("搜索时会用到每个格子的"),r("code",{pre:!0},[s._v("searchDepth")]),s._v("属性，所以每次搜索之前必须在这里初始化它：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 重置节点搜索深度 */")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" resetGridDepth = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < game.gameGridRowCount; i++) {\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" j = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; j < game.gameGridColCount; j++) {\n            "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (gameGrids[i][j].isWalkable) {\n                gameGrids[i][j].searchDepth = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n            }\n        }\n    }\n};\n")])]),r("p",[s._v("前面在全局配置的变量中还定义了一个"),r("code",{pre:!0},[s._v("isVisited")]),s._v("变量，在搜索过程中它可以记录节点是否已经访问过了，每次点击时也应该初始化它的值：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 重置记录节点访问状态的数组 */")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" resetGridVisited = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    isVisited = [];\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < game.gameGridRowCount; i++) {\n        isVisited[i] = [];\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" j = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; j < game.gameGridColCount; j++) {\n            isVisited[i][j] = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n        }\n    }\n};\n")])]),r("p",[s._v("全局还有一个记录每一步搜索到的最短路径的"),r("code",{pre:!0},[s._v("searchDepth")]),s._v("变量需要在这里初始化，赋值为0即可。")]),r("p",[s._v("最后的步骤就是让猫移动了，移动成功后，让游戏所用步数增加，这样我们就完成了一次事件绑定了操作流程，所以接下来的重点便是猫的移动"),r("code",{pre:!0},[s._v("moveCat()")]),s._v("了。")]),r("h2",[s._v("移动神经猫")]),r("p",[s._v("猫的移动函数如下：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 移动猫的位置 */")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" moveCat = "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 找到当前节点周围所有可走的相邻节点")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" nextGrids = getNextGrids(searchDepth, gameGrids[cat.catX][cat.catY]);\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获得相邻节点的搜索结果")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gridsSearchResult = getSearchResults(nextGrids);\n    "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(gridsSearchResult);\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 让猫移动到周围路径最短的那个格子")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (gridsSearchResult.length != "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" moveGrids = [];\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" m = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; m < gridsSearchResult.length; m++) {\n            "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (gridsSearchResult[m].gridDepth == sortSearchDepth(gridsSearchResult)) {\n                moveGrids.push(gridsSearchResult[m].grid);\n            }\n        }\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" randomMoveGrid = moveGrids["),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".floor("),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".random() * moveGrids.length)];\n        "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 清除猫的痕迹")]),s._v("\n        clearGridView(cat.catX, cat.catY, "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(");\n        "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 格子重置为默认状态")]),s._v("\n        updateGameGrid(cat.catX, cat.catY, "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(");\n        "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 让猫移动到下一个格子")]),s._v("\n        cat.catX = randomMoveGrid.gridRow;\n        cat.catY = randomMoveGrid.gridCol;\n        "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 让格子状态变为猫")]),s._v("\n        updateGameGrid(cat.catX, cat.catY, "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(");\n        "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 判断是否lose")]),s._v("\n        isGameLose();\n    } "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 判断是否win")]),s._v("\n        isGameWin();\n    }\n};\n")])]),r("p",[s._v("非常长的一个函数，其中用到的功能点我们一个一个来介绍，先梳理一下整体流程：")]),r("ol",[r("li",[s._v("找到当前猫所在节点周围所有可走的相邻节点")]),r("li",[s._v("获得相邻节点的搜索结果")]),r("li",[s._v("如果搜索结果为空，表示已经没有可以移动到边缘的节点了，游戏结束，玩家胜利")]),r("li",[s._v("如果搜索结果不为空，就让猫移动到周围所有节点中路径最短的那个点（最短路径不唯一就随机取一个点）")]),r("li",[s._v("移动完成后，判断猫是否到达边缘，如果到达了，游戏结束，玩家失败")])]),r("p",[s._v("我们先不提具体的实现流程，而是来看看神经猫的移动思路和搜索算法是怎样的。")]),r("p",[s._v("要让猫移动到边缘，光是移动到有解的一个节点显然是不够的，我们应该采取一种最佳（优）策略，比如：让猫每次移动的节点都是距离边缘路径最短的，当然这样也不是全局最优解，我们甚至可以实现一种必胜策略，在这种策略下人类可能永远也不能围住它。（本文暂不讨论这种可能的实现）")]),r("p",[s._v("本程序采用的就是局部最优的实现，也就是保证每一步的移动都是最短路径，这样虽然不是真正的最优，但是在一定范围内的实现效果也不是很差。")]),r("p",[s._v("要找到最短路径，就会涉及到搜索算法了，而游戏中常用的搜索算法不外乎A*寻路、BFS、DFS、启发式搜索、AB剪枝这几大类，这次我们利用的就是BFS的特性来实现最短路径的搜索。（最开始是用DFS实现了，但是发现只能找到一个解，连当前最短都不能保证，所以换为BFS实现）")]),r("h2",[s._v("搜索算法")]),r("h3",[s._v("深度优先搜索")]),r("p",[s._v("虽然最终采用了BFS来实现最短路径的搜索，但是在实现DFS的过程中让笔者初步认识了搜索时遍历节点的过程，这里也简单介绍一下。")]),r("p",[s._v("施工ing...")])])}],n=r("2877"),p={},v=Object(n["a"])(p,t,e,!1,null,null,null);a["default"]=v.exports}}]);