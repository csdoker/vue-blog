(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["article23"],{fa55:function(s,a,r){"use strict";r.r(a);var t=function(){var s=this,a=s.$createElement;s._self._c;return s._m(0)},e=[function(){var s=this,a=s.$createElement,r=s._self._c||a;return r("section",[r("h2",[s._v("第四章：变量、作用域和内存问题")]),r("h3",[s._v("基本类型和引用类型的值")]),r("p",[s._v("当复制保存着对象的某个变量时，操作的是对象的引用。但在为对象添加属性时，操作的是实际的对象。")]),r("h4",[s._v("动态的属性")]),r("p",[s._v("只能给引用类型值动态地添加属性，不能给基本类型的值添加属性：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\nperson.name = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Nicholas"')]),s._v(";\nalert(person.name); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//"Nicholas"')]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" name = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Nicholas"')]),s._v(";\nname.age = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("27")]),s._v(";\nalert(name.age); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//undefined")]),s._v("\n")])]),r("h4",[s._v("复制变量值")]),r("p",[s._v("从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" num1 = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" num2 = num1;\n")])]),r("p",[s._v("从一个变量向另一个变量复制引用类型的值时，两个变量实际上将引用同一个对象：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj1 = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj2 = obj1;\nobj1.name = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Nicholas"')]),s._v(";\nalert(obj2.name); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//"Nicholas"')]),s._v("\n")])]),r("h4",[s._v("传递参数")]),r("p",[s._v("在向参数传递基本类型的值时，被传递的值会被复制给一个局部变量：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("addTen")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("num")]),s._v(") ")]),s._v("{\n    num += "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(";\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" num;\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" count = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("20")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" result = addTen(count);\nalert(count); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//20，没有变化")]),s._v("\nalert(result); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//30")]),s._v("\n")])]),r("p",[s._v("在向参数传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("setName")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(") ")]),s._v("{\n    obj.name = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Nicholas"')]),s._v(";\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\nsetName(person);\nalert(person.name); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//"Nicholas"')]),s._v("\n")])]),r("p",[s._v("在这个函数内部，obj和person引用的是同一个对象。当在函数内部重写 obj 时，这"),r("br"),s._v(" 个变量引用的就是一个局部对象了，即使在函数内部修改了参数的值，但原始的引用仍然保持未变：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("setName")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(") ")]),s._v("{\n    obj.name = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Nicholas"')]),s._v(";\n    obj = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\n    obj.name = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Greg"')]),s._v(";\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\nsetName(person);\nalert(person.name); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//"Nicholas"')]),s._v("\n")])]),r("blockquote",[r("p",[s._v("可以把 ECMAScript 函数的参数想象成局部变量")])]),r("h4",[s._v("检测类型")]),r("p",[s._v("typeof操作符是确定一个变量是基础类型的最佳工具：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" s = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Nicholas"')]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("22")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" u;\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" n = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" o = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\nalert("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" s); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//string")]),s._v("\nalert("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" i); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//number")]),s._v("\nalert("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" b); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//boolean")]),s._v("\nalert("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" u); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//undefined")]),s._v("\nalert("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" n); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//object")]),s._v("\nalert("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" o); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//object")]),s._v("\n")])]),r("p",[s._v("检测引用类型（一个实例具体是什么引用类型）：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("result = variable "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("\n\nalert(person instanceof Object);  // 变量 person 是 Object 吗？\nalert(colors instanceof Array); // 变量 colors 是 Array 吗？\nalert(pattern instanceof RegExp); // 变量 pattern 是 RegExp 吗？\n")])]),r("h3",[s._v("执行环境及作用域")]),r("p",[r("code",{pre:!0},[s._v("执行环境")]),s._v("定义了变量或函数有权访问的其他数据，决定了它们各自的行为。当代码在一个环境中执行时，会创建变量对象的一个"),r("code",{pre:!0},[s._v("作用域链")]),s._v("，作用域链的用途：保证对执行环境有权访问的所有变量和函数的有序访问。")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" color = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"blue"')]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("changeColor")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (color === "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"blue"')]),s._v("){\n        color = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"red"')]),s._v(";\n    } "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        color = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"blue"')]),s._v(";\n    }\n}\nchangeColor();\nalert("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Color is now "')]),s._v(" + color);\n")])]),r("p",[s._v("函数 changeColor() 的作用域链包含两个对象：它自己的变量对象（其中定义着arguments对象）和全局环境的变量对象。可以在函数内部访问变量color，就是因为可以在这个作用域链中找到它。在局部作用域中定义的变量可以在局部环境中与全局变量互换使用：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" color = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"blue"')]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("changeColor")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" anotherColor = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"red"')]),s._v(";\n    "),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("swapColors")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" tempColor = anotherColor;\n        anotherColor = color;\n        color = tempColor;\n        "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里可以访问 color、anotherColor 和 tempColor")]),s._v("\n    }\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里可以访问 color 和 anotherColor，但不能访问 tempColor")]),s._v("\n    swapColors();\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里只能访问 color")]),s._v("\nchangeColor();\n")])]),r("p",[s._v("内部环境可以通过作用域链访问所有的外部环境，但外部环境不能访问内部环境中的任何变量和函数。每个环境都可以向上搜索作用域链，以查询变量和函数名；但任何环境都不能通过向下搜索作用域链而进入另一个执行环境。")]),r("h4",[s._v("延长作用域链")]),r("p",[s._v("当执行流进入下列任何一个语句时，作用域链就会得到加长：")]),r("ul",[r("li",[s._v("try-catch语句的catch块")]),r("li",[s._v("with语句")])]),r("p",[s._v("这两个语句都会在作用域链的前端添加一个变量对象，对with语句来说，会将指定的对象添加到作用域链中：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("buildUrl")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" qs = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"?debug=true"')]),s._v(";\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("with")]),s._v("(location){\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" url = href + qs;\n    }\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" url;\n}\n")])]),r("h4",[s._v("没有块级作用域")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(") {\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" color = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"blue"')]),s._v(";\n}\nalert(color); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//"blue"')]),s._v("\n")])]),r("p",[s._v("在JavaScript 中，if语句中的变量声明会将变量添加到当前的执行环境。由for语句创建的变量i即使在for循环执行结束后，也依旧会存在于循环外部的执行环境中：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i="),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v("; i++){\n    doSomething(i);\n}\nalert(i); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//10")]),s._v("\n")])]),r("h5",[s._v("声明变量")]),r("p",[s._v("使用var声明的变量会自动被添加到最接近的环境中：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("add")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("num1, num2")]),s._v(") ")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" sum = num1 + num2;\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" sum;\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" result = add("),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("20")]),s._v("); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//30")]),s._v("\nalert(sum); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//由于 sum 不是有效的变量，因此会导致错误")]),s._v("\n")])]),r("p",[s._v("如果省略这个例子中的var关键字，那么当add()执行完毕后，sum也将可以访问到：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("add")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("num1, num2")]),s._v(") ")]),s._v("{\n    sum = num1 + num2;\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" sum;\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" result = add("),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("20")]),s._v("); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//30")]),s._v("\nalert(sum); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//30")]),s._v("\n")])]),r("h5",[s._v("查询标识符")]),r("p",[s._v("当在某个环境中为了读取或写入而引用一个标识符时，必须通过搜索来确定该标识符实际代表什么：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" color = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"blue"')]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getColor")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" color;\n}\nalert(getColor()); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//"blue"')]),s._v("\n")])]),r("p",[s._v("在这个搜索过程中，如果存在一个局部的变量的定义，则搜索会自动停止，不再进入另一个变量对象：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" color = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"blue"')]),s._v(";\n"),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getColor")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" color = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"red"')]),s._v(";\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" color;\n}\nalert(getColor()); "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//"red"')]),s._v("\n")])]),r("p",[s._v("任何位于局部变量color的声明之后的代码，如果不使用window.color都无法访问全局color变量。")]),r("h3",[s._v("垃圾收集")]),r("h4",[s._v("标记清除")]),r("p",[s._v("当变量进入环境（例如，在函数中声明一个变量）时，就将这个变量标记为“进入环境”。当变量离开环境时，则将其标记为“离开环境”。垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记，然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量。最后，垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。")]),r("h4",[s._v("引用计数")]),r("p",[s._v("引用计数的含义是跟踪记录每个值被引用的次数，对象A中包含一个指向对象B的指针，而对象B中也包含一个指向对象A的引用就是循环引用：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("problem")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" objectA = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" objectB = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\n    objectA.someOtherObject = objectB;\n    objectB.anotherObject = objectA;\n}\n")])]),r("p",[s._v("IE的JavaScript引擎是使用标记清除策略来实现的，但JavaScript访问的COM对象依然是基于引用计数策略：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" element = "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"some_element"')]),s._v(");\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myObject = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\nmyObject.element = element;\nelement.someObject = myObject;\n")])]),r("p",[s._v("可以使用下面的代码消除前面例子创建的循环引用：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("myObject.element = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\nelement.someObject = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n")])]),r("h4",[s._v("管理内存")]),r("p",[s._v("优化内存占用的最佳方式，就是为执行中的代码只保存必要的数据。一旦数据不再有用，最好通过将其值设置为 null 来释放其引用——这个做法叫做解除引用（dereferencing）：")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("createPerson")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" localPerson = "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\n    localPerson.name = name;\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" localPerson;\n}\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" globalPerson = createPerson("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Nicholas"')]),s._v(");\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 手工解除 globalPerson 的引用")]),s._v("\nglobalPerson = "),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n")])]),r("p",[s._v("由于localPerson在createPerson()函数执行完毕后就离开了其执行环境，因此无需我们显式地去为它解除引用，对于全局变量globalPerson而言，则需要我们在不使用它的时候手工为它解除引用。")])])}],l=r("2877"),n={},p=Object(l["a"])(n,t,e,!1,null,null,null);a["default"]=p.exports}}]);