(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c78e2"],{"50b3":function(s,a,e){"use strict";e.r(a);var r=function(){var s=this,a=s.$createElement;s._self._c;return s._m(0)},t=[function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("section",[e("p",[s._v("工作之余，当然是要恶补下基础了，拿什么开刀好呢？补基础肯定是要从读书开始咯~所以我就决定开个新坑“啃书笔记”。顾名思义，这个文章系列其实就是记录下一些书中个人认为有价值的东西和思路。"),e("br"),s._v(" 整理了下自己最近的学习路线，还是决定先从JavaScript开始，随便在网上搜了下JavaScript方面的基础书籍，发现这本DOM编程艺术的上镜率特高，而书本身的内容比较适合入门，篇幅也不长，所以就理所当然的被我用来当漫长啃书之路的热身书了~")]),e("h2",[s._v("图片库")]),e("blockquote",[e("p",[s._v("项目演示地址："),e("em",[e("a",{attrs:{href:"https://blog.csdoker.com/StudyProject/BookProject/DOM_Scripting/image_gallery/gallery.html"}},[s._v("image_gallery")])])])]),e("p",[s._v("本书前七章以一个JavaScript图片库的Demo作为演示，从最原始的代码开始，每章改进一个功能点，最终完成了这个图片库。个人非常喜欢这种讲解方式，这里就直接以最终版本的代码来进行讲解了，我们一个一个函数的分析，看看到底用了哪些知识点。")]),e("h3",[s._v("addLoadEvent")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("addLoadEvent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("func")]),s._v(") ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" oldonload = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".onload;\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".onload != "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'function'")]),s._v(") {\n        "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".onload = func;\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".onload = "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n            oldonload();\n            func();\n        };\n    }\n}\n")])]),e("p",[s._v("首先是"),e("code",{pre:!0},[s._v("addLoadEvent()")]),s._v("这个函数，它是整个程序的入口函数。我们可以发现，这里并没有像以前一样直接用"),e("code",{pre:!0},[s._v("window.onload")]),s._v("这样的方式，而是把它封装在这样一个函数里，为什么要这样做呢？"),e("br"),s._v(" 答案很简单，假如我们在页面加载完成之后只需要加载一个方法"),e("code",{pre:!0},[s._v("myfunction()")]),s._v("，那么我们完全可以直接把它把绑定在onload上：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".onload = myfunction();\n")])]),e("p",[s._v("但是如果有更多的函数呢？可能你会这样写：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".onload = firstFunction();\n"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".onload = secondFunction();\n")])]),e("p",[s._v("其实你可能马上就能意识到问题所在了，这种方式"),e("code",{pre:!0},[s._v("secondFunction()")]),s._v("将会把"),e("code",{pre:!0},[s._v("firstFunction()")]),s._v("的功能取代了，所以是不行的。"),e("br"),s._v(" 当然我们可以稍加改进：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(".onload = "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    firstFunction();\n    secondFunction();\n};\n")])]),e("p",[s._v("这种方式是正确的，但是缺点在于每次增加一个函数都必须在方法体内手动添加，而且假如我们的页面引入了多个js，而每个js都有一个window.onload的话还是会出现覆盖的情况，所以我们还可以采用一种更优雅的实现方式，不管你打算在页面加载完毕后要执行多少个函数，利用该函数都可以轻松的实现。"),e("br"),s._v(" 该函数名为"),e("code",{pre:!0},[s._v("addLoadEvent")]),s._v("。该函数仅一个参数：该参数指定了你打算在页面加载完毕后需要执行的函数的函数名。"),e("br"),e("code",{pre:!0},[s._v("addLoadEvent")]),s._v("函数主要是完成如下的操作：")]),e("ol",[e("li",[s._v("把现有的window.onload事件处理函数的值记录到oldonload中")]),e("li",[s._v("判断当前window.onload上面是否绑定了函数")]),e("li",[s._v("如果没有绑定任何函数，就把当前传入的函数添加给它")]),e("li",[s._v("如果已经绑定了函数，就把传入的函数追加到现有函数的后面")])]),e("p",[s._v("现在通过这个函数，我们就可以像下面这样绑定我们需要用到的函数了：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("addLoadEvent(preparePlaceholder);\naddLoadEvent(prepareGallery);\n")])]),e("p",[s._v("这个函数非常有用，尤其当代码变得很复杂的时候。无论你打算在页面加载完毕时执行多少个函数，只需要多写几条这样的语句就可以解决了。")]),e("h3",[s._v("insertAfter")]),e("p",[s._v("众所周知，DOM本身提供了"),e("code",{pre:!0},[s._v("insertBefore()")]),s._v("这个方法，当你告诉它下面这三件事后，它就能将一个新元素添加到一个现有元素之前：")]),e("ol",[e("li",[s._v("newElement：你想插入的新元素")]),e("li",[s._v("targetElement：你想把这个新元素插入到哪个现有元素（目标元素）之前")]),e("li",[s._v("parentElement：目标元素的父元素")])]),e("p",[s._v("调用语法：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("parent.insertBefore(newElement,targetElement);\n")])]),e("p",[s._v("这时候你可能会想有没有一个函数能让我们把指定元素添加到一个目标元素的后面呢？很遗憾，DOM并没有给我们实现这样的函数，不过我们可以利用"),e("code",{pre:!0},[s._v("insertBefore()")]),s._v("来自己封装一个：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("insertAfter")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("newElement,targetElement")]),s._v(") ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" parent = targetElement.parentNode;\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (parent.lastChild == targetElement) {\n        parent.appendChild(newElement);\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        parent.insertBefore(newElement,targetElement.nextSibling);\n    }\n}\n")])]),e("p",[s._v("这个函数用到了以下DOM方法和属性：（自行查阅w3c文档，本文不作讲解）")]),e("ul",[e("li",[s._v("parentNode属性")]),e("li",[s._v("lastChild属性")]),e("li",[s._v("appendChild方法")]),e("li",[s._v("insertBefore方法")]),e("li",[s._v("nextSibling方法")])]),e("p",[s._v("下面我们就看看这个函数是如何一步一步完成工作的：")]),e("ol",[e("li",[s._v("函数有两个传入的参数：一个是将被插入的新元素"),e("code",{pre:!0},[s._v("newElement")]),s._v("，另一个是目标元素"),e("code",{pre:!0},[s._v("targetElement")]),s._v("。")]),e("li",[s._v("找到目标元素的父元素"),e("code",{pre:!0},[s._v("parentNode")]),s._v("并保存在"),e("code",{pre:!0},[s._v("parent")]),s._v("变量里")]),e("li",[s._v("判断目标元素是不是其父元素的最后一个子元素"),e("code",{pre:!0},[s._v("lastChild")]),s._v("（相当于判断是否是唯一子元素）")]),e("li",[s._v("如果最后一个子元素，就用"),e("code",{pre:!0},[s._v("appendChild()")]),s._v("方法把新元素追加到parent元素上，这样新元素就恰好被插入到目标元素之后")]),e("li",[s._v("如果不是，就把新元素插入到目标元素和目标元素的下一个兄弟元素之间：（即目标元素的nextSibling属性）")])]),e("p",[s._v("利用封装好的"),e("code",{pre:!0},[s._v("insertAfter()")]),s._v("函数，我们就能一步一步把想要的元素插入进文档中了。")]),e("h4",[s._v("补充：getElementsByClassName")]),e("p",[s._v("与"),e("code",{pre:!0},[s._v("insertAfter()")]),s._v("类似的，既然有"),e("code",{pre:!0},[s._v("getElementsByTagName()")]),s._v("，那么肯定就有"),e("code",{pre:!0},[s._v("getElementsByClassName()")]),s._v("，幸运的是HTML5已经有这个函数的实现了，所以我们在版本较新的浏览器中可以直接使用，而在不支持这个新API的浏览器里我们依然需要自己去封装一个函数，书中给出了一种实现：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getElementsByClassName")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("node, classname")]),s._v(") ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (node.getElementsByClassName) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" node.getElementsByClassName(classname);\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" results = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v("();\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" elems = node.getElementsByTagName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"*"')]),s._v(");\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < elems.length; i++) {\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (elems[i].className.indexOf(classname) != "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v(") {\n                results[results.length] = elems[i];\n            }\n        }\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" results;\n    }\n}\n")])]),e("p",[s._v("这个函数接收两个参数，第一个node表示DOM树中的搜索起点，第二个classname就是要搜索的类名了，接下来我们还是看看函数的执行过程：")]),e("ol",[e("li",[s._v("判断传入的节点上是否存在"),e("code",{pre:!0},[s._v("getElementsByClassName()")])]),e("li",[s._v("如果已经存在，就直接返回对应classname的节点列表")]),e("li",[s._v("如果不存在，那么遍历所有标签，找到带有相应类名的元素")])]),e("p",[s._v("思路很清晰吧，不过这个函数只适用于单类名的情况，所以还需要考虑多类名的情况：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getElementsByClassName")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("node, classname")]),s._v(") ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (node.getElementsByClassName) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" node.getElementsByClassName(classname);\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" results = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v("();\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" elems = node.getElementsByTagName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"*"')]),s._v(");\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < elems.length; i++) {\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" arr = elems[i].className.split("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v(");\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" j = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; j < arr.length; j++) {\n                "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (arr[j].indexOf("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v(" + classname + "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v(") != "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v(") {\n                    results.push(elems[i]);\n                }\n            }\n        }\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" results;\n    }\n}\n")])]),e("p",[s._v("在遍历元素数组时，我们需要把每个元素的类名以空格作为分割，全部记录在一个数组arr里，然后再去遍历这个arr数组，如果arr的其中一项与我们传入的classname匹配，就将当前的元素放入results数组里，最后返回这个结果。")]),e("blockquote",[e("p",[s._v("这里值得一提的是，我们在判断是否匹配时，将条件改为"),e("code",{pre:!0},[s._v('" " + classname + " "')]),s._v("，这是因为书中给出的实现会将"),e("code",{pre:!0},[s._v("div123")]),s._v("、"),e("code",{pre:!0},[s._v("123div")]),s._v("、"),e("code",{pre:!0},[s._v("1div23")]),s._v("之类的情况也匹配到，这明显是不合理的。")])]),e("p",[s._v("好了，现在让我们来看看这个方法是否真正照顾到了所有情况呢？其实上面的实现虽然能处理元素多类名的情况，但是传入的classname参数默认还是必须单类名，所以参数多类名也必须处理：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getElementsByClassName")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("node, classnames")]),s._v(") ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" containIn = "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("parent, child")]),s._v(") ")]),s._v("{\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" result = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < child.length; i++) {\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ((parent).indexOf("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v(" + child[i] + "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v(") == "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v(") {\n                result = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n                "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v(";\n            }\n        }\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result;\n    };\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (node.getElementsByClassName) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" node.getElementsByClassName(classnames);\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" results = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v("();\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" elems = node.getElementsByTagName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"*"')]),s._v(");\n        classnames = classnames.split("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v(");\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < elems.length; i++) {\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (containIn("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v(" + elems[i].className + "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v(", classnames)) {\n                results.push(elems[i]);\n            }\n        }\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" results;\n    }\n}\n")])]),e("p",[s._v("改进后的代码中，只将传入的classnames参数分割成数组，而元素的类名作为一个整体来进行判断。这里因为逻辑稍显复杂了，所以将循环部分的逻辑单独封装成"),e("code",{pre:!0},[s._v("containIn()")]),s._v("函数以供使用。至此，我们封装的这个"),e("code",{pre:!0},[s._v("getElementsByClassName()")]),s._v("函数才能算是相对完整的实现出来了。")]),e("h3",[s._v("preparePlaceholder")]),e("p",[s._v("这个函数主要是将作为图片展示的img元素和提示信息的p元素从文档中分离出来，个人认为可有可无，这里不做细讲。")]),e("h3",[s._v("prepareGallery")]),e("p",[s._v("接下来就应该为我们页面上展示的图片绑定点击事件了：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("prepareGallery")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementsByTagName) "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById) "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"imagegallery"')]),s._v(")) "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gallery = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"imagegallery"')]),s._v(");\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" links = gallery.getElementsByTagName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(");\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ( "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i="),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < links.length; i++) {\n        links[i].onclick = "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" showPic("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(");\n        }\n        links[i].onkeypress = links[i].onclick;\n    }\n}\n")])]),e("p",[s._v("这里用一个循环来给每个a标签添加onclick事件，而"),e("code",{pre:!0},[s._v("showPic()")]),s._v("函数最终会返回一个false，避免a标签的href属性带来的影响。不过我们最后还是在HTML文档中为a标签加上了href属性，这是假设JavaScript脚本不起作用或者没有加载成功时，页面在一定程度上仍然可以正常使用。接下来，我们就应该实现"),e("code",{pre:!0},[s._v("showPic()")]),s._v("函数了。")]),e("h4",[s._v("showPic")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("showPic")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("whichpic")]),s._v(") ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"placeholder"')]),s._v(")) "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" source = whichpic.getAttribute("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"href"')]),s._v(");\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" placeholder = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"placeholder"')]),s._v(");\n    placeholder.setAttribute("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"src"')]),s._v(",source);\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"description"')]),s._v(")) "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (whichpic.getAttribute("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"title"')]),s._v(")) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" text = whichpic.getAttribute("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"title"')]),s._v(");\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" text = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v(";\n    }\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" description = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"description"')]),s._v(");\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (description.firstChild.nodeType == "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(") {\n        description.firstChild.nodeValue = text;\n    }\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n}\n")])]),e("p",[s._v("这个函数接收的"),e("code",{pre:!0},[s._v("whichpic")]),s._v("参数便是当前点击的a标签的dom对象，而在函数中，首先获取到当前标签的href属性值，然后设置给图片展示标签的src属性，最后改变了描述信息标签的文本值。")]),e("p",[s._v("到这里，图片库这个例子就全部分析完毕了。")]),e("blockquote",[e("p",[s._v("References：")]),e("p",[e("em",[e("a",{attrs:{href:"http://blog.csdn.net/chenssy/article/details/7365184"}},[s._v("onload事件——addLoadEvent函数")])])]),e("p",[e("em",[e("a",{attrs:{href:"https://www.zhihu.com/question/35877074"}},[s._v("关于getElementsByClassName在老版本浏览器中的支持方法函数解释")])])]),e("p",[e("em",[e("a",{attrs:{href:"https://segmentfault.com/q/1010000006897689"}},[s._v("JavaScript getElementsByClassName方法求解")])])])]),e("h2",[s._v("Tab栏")]),e("blockquote",[e("p",[s._v("项目演示地址："),e("em",[e("a",{attrs:{href:"https://blog.csdoker.com/StudyProject/VideoProject/Tab/tab.html"}},[s._v("tab")])])])]),e("p",[s._v("关于DOM的操作，以及各种事件的绑定，有时候活用this关键字也会取得意想不到的效果。这个tab栏的例子是从某视频课程里截选出来的，虽然简单，但是其中的思想很有学习的意义：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("fn")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("str")]),s._v(") ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" arrLi = str.getElementsByTagName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"li"')]),s._v(");\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" arrDiv = str.getElementsByTagName("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"span"')]),s._v(");\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < arrLi.length; i++) {\n        arrLi[i].index = i;\n        arrLi[i].onmouseover = "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" j = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; j < arrLi.length; j++) {\n                arrLi[j].className = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v(";\n                arrDiv[j].className = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v(";\n            }\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".className = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"current"')]),s._v(";\n            arrDiv["),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".index].className = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"show"')]),s._v(";\n        };\n    }\n}\n")])]),e("p",[s._v("这个函数的重点便是将每次循环的索引值保存在每个li元素对象的index属性中，因为只有这样，才能在给这些对象绑定的onmouseover事件中获取到它们的index值，从而找到对应span元素的className。这种this关键字的运用比我们在图片库中的使用更为巧妙，其实this在JavaScript中的用法非常之多，适当的使用可以大大减少不必要的冗余代码。")]),e("h2",[s._v("滑动动画")]),e("blockquote",[e("p",[s._v("项目演示地址："),e("em",[e("a",{attrs:{href:"https://blog.csdoker.com/StudyProject/BookProject/DOM_Scripting/slideshow/list.html"}},[s._v("slideshow")])])])]),e("p",[s._v("第十章介绍了利用JavaScript内置的"),e("code",{pre:!0},[s._v("setTimeout")]),s._v("实现动画效果，这里我们就直接看书中图片滑动效果的封装函数了，实现如下：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("moveElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("elementID, final_x, final_y, interval")]),s._v(") ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById) "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById(elementID)) "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" elem = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById(elementID);\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (elem.movement) {\n        clearTimeout(elem.movement);\n    }\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!elem.style.left) {\n        elem.style.left = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"0px"')]),s._v(";\n    }\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!elem.style.top) {\n        elem.style.top = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"0px"')]),s._v(";\n    }\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" xpos = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("parseInt")]),s._v("(elem.style.left);\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" ypos = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("parseInt")]),s._v("(elem.style.top);\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (xpos == final_x && ypos == final_y) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n    }\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (xpos < final_x) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" dist = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".ceil((final_x - xpos)/"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(");\n        xpos = xpos + dist;\n    }\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (xpos > final_x) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" dist = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".ceil((xpos - final_x)/"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(");\n        xpos = xpos - dist;\n    }\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (ypos < final_y) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" dist = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".ceil((final_y - ypos)/"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(");\n        ypos = ypos + dist;\n    }\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (ypos > final_y) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" dist = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Math")]),s._v(".ceil((ypos - final_y)/"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(");\n        ypos = ypos - dist;\n    }\n    elem.style.left = xpos + "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"px"')]),s._v(";\n    elem.style.top = ypos + "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"px"')]),s._v(";\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" repeat = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"moveElement(\'"')]),s._v("+elementID+"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"\',"')]),s._v("+final_x+"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('","')]),s._v("+final_y+"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('","')]),s._v("+interval+"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('")"')]),s._v(";\n    elem.movement = setTimeout(repeat,interval);\n}\n")])]),e("p",[s._v("传入的四个参数：")]),e("ul",[e("li",[s._v("elementID：要移动元素的id")]),e("li",[s._v("final_x：移动终点的x坐标")]),e("li",[s._v("final_y：移动终点的y坐标")]),e("li",[s._v("interval：setTimeout的调用函数间隔时间")])]),e("p",[s._v("有了它们，我们就能进行移动的操作了。")]),e("p",[s._v("首先setTimeout的原理是间隔指定的时间调用一次指定的函数，可以理解为一个递归的效果，不停的调用一个函数，直到满足函数里的一个条件，最后退出调用。而具体到这个例子中，结束条件即是元素的坐标值是否和目标点的坐标值相等（为了方便，一般条件判断采用大于小于来表示这种关系）。")]),e("p",[s._v("动画，或者说是元素位置的移动，其实就是通过对其绝对定位的left、top值的改变来实现的，每次间隔改变一定的值，在人眼看来就像是一个动画的效果了。书中最终实现的是一个速度变小的运动过程，距离终点越近，每次移动的距离越小，关键点便是使用了"),e("code",{pre:!0},[s._v("Math.ceil")]),s._v("来向上取整，因为如果不取整，当距离小于1时，由于不可能移动小于1像素的距离，元素就将停止移动了。")]),e("p",[s._v("另外一个需要处理的问题就是由于一次又一次的递归调用，或者由于用户快速的操作而导致重复触发这个移动函数，setTimeout队列里的事件就会积累起来，最终就会使动画效果产生滞后。为了避免这种情况，我们就必须在每次调用setTimeout之前，先清除掉这个元素以前绑定的setTimeout事件。（需要注意的是书中这里再次使用了对象的属性来绑定这个标识，巧妙的解决了变量作用域的问题，所以可以明显看到属性在很多时候比临时变量的用途要大得多，而且方便后期我们进行程序变量的维护。）")]),e("h2",[s._v("综合示例")]),e("p",[s._v("书中最后一章的实践项目把前面所有章节的知识点串联起来了，实现与前面大致是相同的，本文不再赘述。")])])}],l=e("2877"),n={},p=Object(l["a"])(n,r,t,!1,null,null,null);a["default"]=p.exports}}]);